
/* Mozart.c */
void DoHelpMozart(short **, short *);
short GetMaxYBox(void);
void TraceGrille2(short, short, Rect *);
void SelectGoodMode(void);
short GetMozartTrack(void);
void GetMozartTrackRect(Rect *, short);
void GetShowVal(short *, short *, short *, short *);
void ResetSelection(void);
short PosToNote3(Point, short *, short *);
short PosToNote4(Point, short *, short);
void CheckSelecValue(void);
Point NoteToPos2(Point, short);
void GetSelectionRect2(Rect *, Boolean);
void InvalSelectionRect(void);
Boolean PointSelection(Point);
void MozartHelp(void);
void DrawCubeNote2(Rect *, short, short, Boolean);
void UpdateSelectedRect(Rect *, Rect *);
void DeleteSelecNote(short, short);
void SetMobiusRect(Rect *, short, short, short, short);
short TrackMarquee(Point, Rect *, Rect *);
void GetMDEFRect(Rect *, Rect *, short);
pascal void TrackViewDefFn(short, MenuHandle, Rect *, Point, short *);
void InitTracksMenu(void);
void SetUpTracksMenu(void);
void SwitchColor(short);
void DrawNewNote(void);
void SwitchColorBack(short);
void UpdateInstruMenu(void);
Boolean aNote2(Point, Point *, short);
void SetWinControl(short, short, DialogPtr);
void SetWMozart(short);
void DoGrowMozart(DialogPtr);
void Update1Note(short, short);
void GetPianoMozartRect(Rect *);
void SelectToucheMozart(short, short);
long ComputeRight(short, short);
void ComputeGrilleGWorld(void);
void UpdateMozartInfoInternal(void);
void DoNullMozart(void);
void UpdateMozartInfo(void);
void DrawPartitionReader(void);
void ErasePartitionReader(void);
void UpdateMozartWindow(DialogPtr);
pascal void actionProc(ControlHandle, short);
void GetNoteRect2(Rect *, Point, short);
void SelectNotes(void);
void SetInstruMozart(short);
void DeleteOneMozartNote(short, short, short);
void CalculDiffStartBox(void);
void PressPartition(Point);
void DoItemPressMozart(short, DialogPtr);
void SetUpLabels(void);
void CreateMozartWindow(void);
void CloseMozartWindow(void);
void DoKeyPressMozart(short);
Pcmd *CreatePcmdFromSelectionMozart(void);
void COPYMozart(void);
void GetMinMaxPcmd(Pcmd *, short *, short *);
void PasteCmdBox(Pcmd *);
void PASTEMozart(void);
void OpenPcmdMozart(FSSpec *);
void CleanInvert(Rect *, Rect *);
void EraseMark(void);
void DragMark2(short);
pascal OSErr MyTrackingBox(short, WindowPtr, void *, DragReference);
Boolean DragBox(RgnHandle, Pcmd *, EventRecord *);
pascal OSErr MyReceiveDropBox(WindowPtr, void*, DragReference);
